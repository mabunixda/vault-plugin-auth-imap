name: ci

on:
  push:
    branches: [ 'main' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ 'main' ]

env:
  GOVERSION: "1.20.x"

permissions:
  contents: write

jobs:

  prebuild:
    runs-on: ubuntu-latest

    outputs:
      currentDate: ${{ steps.info_date.outputs.date }}

    steps:

    - name: Gather Information - Date
      id: info_date
      run: echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

    - uses: actions/checkout@v3

    - name: Check pre-commit presence
      if: success() && !startsWith(github.ref, 'refs/tags/')
      id: precommit_exists
      uses: andstor/file-existence-action@v1
      with:
        files: ".pre-commit-config.yaml"

    - uses: actions/setup-python@v3
      if: steps.precommit_exists.outputs.files_exists == 'true' && !startsWith(github.ref, 'refs/tags/')

    - uses: actions/setup-go@v3
      if: steps.precommit_exists.outputs.files_exists == 'true' && !startsWith(github.ref, 'refs/tags/')
      with:
        go-version: ${{ env.GOVERSION }}
        cache: true

    - uses: pre-commit/action@v3.0.0
      if: steps.precommit_exists.outputs.files_exists == 'true' && !startsWith(github.ref, 'refs/tags/')

  goreleaser:
    needs: prebuild
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: git fetch --force --tags

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVERSION }}
          cache: true

      - name: gitstate check
        id: gitdirty
        run: |
          echo GIT_DIRTY=$(test -n "`git status --porcelain`" && echo "dirty" || echo "clean")  >> "$GITHUB_OUTPUT"
          echo BUILD_FLAGS="$( test "$GITHUB_REF_TYPE" = "tag"  && echo "release" || echo "build --snapshot" )" >> "$GITHUB_OUTPUT"

      - name: CI Build
        uses: goreleaser/goreleaser-action@v3
        if: success()
        with:
          distribution: goreleaser
          version: latest
          args: ${{ steps.gitdirty.outputs.BUILD_FLAGS}}
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_ACCESS_TOKEN }}
          BUILD_DATE: ${{ needs.prebuild.outputs.currentDate }}
          VERSION: ${{ needs.prebuild.outputs.version }}
          GOVERSION: ${{ env.GOVERSION }}
          GIT_DIRTY: ${{ steps.gitdirty.outputs.GIT_DIRTY}}

      - name: Upload assets
        if: success() && !startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v3
        with:
          name: commandemy
          path: dist/*

  release:
    needs: [ prebuild, goreleaser ]
    if: github.event_name != 'pull_request' && success() && !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.BOT_ACCESS_TOKEN }}

    - uses: go-semantic-release/action@v1
      id: generate_changelog
      with:
        github-token: ${{ secrets.BOT_ACCESS_TOKEN }}
        prepend: true
        changelog-file: CHANGELOG.md

    - name: Update changelog
      uses: stefanzweifel/git-auto-commit-action@v4
      if: steps.generate_changelog.outputs.version != ''
      with:
        commit_message: '[skip ci] update changelog - ${{ steps.generate_changelog.outputs.version }}'
        file_pattern: CHANGELOG.md
